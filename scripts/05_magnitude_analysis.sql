/*
===============================================================================
MAGNITUDE ANALYSIS
===============================================================================
Purpose:
    - To quantify metrics across categorical dimensions.
    - Understand the size and distribution of various entities in the data.
    - Identify concentration of sales, customers, products by dimension.
    - Help in identifying top segments (countries, categories, customers, etc.)

SQL Features Used:
    - Aggregate Functions: SUM(), COUNT(), AVG()
    - GROUP BY, ORDER BY, RANK(), CTEs
    - Window Functions (for percentages and ranking)

===============================================================================
*/

-- Total customers grouped by country, along with their percentage contribution
WITH total_cte AS (
    SELECT COUNT(*) AS total_customers FROM gold.dim_customers
)
SELECT
    country,
    COUNT(customer_key) AS total_customers,
    ROUND(COUNT(customer_key) * 100.0 / t.total_customers, 2) AS percentage_of_total
FROM gold.dim_customers, total_cte t
GROUP BY country, t.total_customers
ORDER BY total_customers DESC;

-- Total customers grouped by gender with contribution percentage
WITH gender_total AS (
    SELECT COUNT(*) AS total_customers FROM gold.dim_customers
)
SELECT
    gender,
    COUNT(customer_key) AS total_customers,
    ROUND(COUNT(customer_key) * 100.0 / g.total_customers, 2) AS percentage_of_total
FROM gold.dim_customers, gender_total g
GROUP BY gender, g.total_customers
ORDER BY total_customers DESC;

-- Number of products by category + ranking
SELECT
    category,
    COUNT(product_key) AS total_products,
    RANK() OVER (ORDER BY COUNT(product_key) DESC) AS category_rank
FROM gold.dim_products
GROUP BY category
ORDER BY total_products DESC;

-- Average cost per category, to understand product pricing trends
SELECT
    category,
    ROUND(AVG(cost), 2) AS avg_cost
FROM gold.dim_products
GROUP BY category
ORDER BY avg_cost DESC;

-- Total revenue by product category with % contribution and ranking
WITH category_sales AS (
    SELECT
        p.category,
        SUM(f.sales_amount) AS total_revenue
    FROM gold.fact_sales f
    JOIN gold.dim_products p ON p.product_key = f.product_key
    GROUP BY p.category
),
total_revenue_cte AS (
    SELECT SUM(total_revenue) AS grand_total FROM category_sales
)
SELECT
    cs.category,
    cs.total_revenue,
    ROUND(cs.total_revenue * 100.0 / tr.grand_total, 2) AS percentage_contribution,
    RANK() OVER (ORDER BY cs.total_revenue DESC) AS revenue_rank
FROM category_sales cs, total_revenue_cte tr
ORDER BY cs.total_revenue DESC;

-- Revenue generated by each customer (top 20 customers)
SELECT TOP 20
    c.customer_key,
    CONCAT(c.first_name, ' ', c.last_name) AS customer_name,
    SUM(f.sales_amount) AS total_revenue,
    COUNT(DISTINCT f.order_number) AS total_orders
FROM gold.fact_sales f
JOIN gold.dim_customers c ON c.customer_key = f.customer_key
GROUP BY c.customer_key, c.first_name, c.last_name
ORDER BY total_revenue DESC;

-- Distribution of sold items across countries (Top 10 Countries)
SELECT TOP 10
    c.country,
    SUM(f.quantity) AS total_items_sold,
    ROUND(SUM(f.quantity) * 100.0 / SUM(SUM(f.quantity)) OVER(), 2) AS percentage_of_total
FROM gold.fact_sales f
JOIN gold.dim_customers c ON c.customer_key = f.customer_key
GROUP BY c.country
ORDER BY total_items_sold DESC;
